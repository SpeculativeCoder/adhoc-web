<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2022-2024 SpeculativeCoder (https://github.com/SpeculativeCoder)
  ~
  ~ Permission is hereby granted, free of charge, to any person obtaining a copy
  ~ of this software and associated documentation files (the "Software"), to deal
  ~ in the Software without restriction, including without limitation the rights
  ~ to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  ~ copies of the Software, and to permit persons to whom the Software is
  ~ furnished to do so, subject to the following conditions:
  ~
  ~ The above copyright notice and this permission notice shall be included in all
  ~ copies or substantial portions of the Software.
  ~
  ~ THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  ~ IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  ~ FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  ~ AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  ~ LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  ~ OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  ~ SOFTWARE.
  -->

<configuration>

    <conversionRule conversionWord="color" converterClass="adhoc.system.logging.AdhocColorConverter"/>
    <conversionRule conversionWord="newlines" converterClass="adhoc.system.logging.AdhocNewlinesConverter"/>
    <!--<conversionRule conversionWord="ewtpc" converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter" />-->

    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">

        <!-- quick/handy way to only show mutating SQL if chasing something down when org.hibernate.SQL logging set to debug -->
        <!--<filter class="ch.qos.logback.core.filter.EvaluatorFilter">
            <evaluator>
                <expression>
                    ("org.hibernate.SQL".equals(logger) &amp;&amp;
                    !message.startsWith("update") &amp;&amp;
                    !message.startsWith("insert") &amp;&amp;
                    !message.startsWith("delete"))
                </expression>
            </evaluator>
            <onMatch>DENY</onMatch>
            <onMismatch>NEUTRAL</onMismatch>
        </filter>-->

        <!-- !message.endsWith("for update") -->

        <!-- suppress some artemis errors - TODO: chase down why these happen -->
        <filter class="ch.qos.logback.core.filter.EvaluatorFilter">
            <evaluator>
                <expression>
                    ("org.apache.activemq.artemis.core.server".equals(logger)
                    &amp;&amp; message.startsWith("AMQ224037: cluster connection Failed to handle message"))
                </expression>
            </evaluator>
            <onMatch>DENY</onMatch>
            <onMismatch>NEUTRAL</onMismatch>
        </filter>

        <!-- suppress no data warnings from hsqldb UPDATEs etc. which don't update any columns (HSQLDB) -->
        <!--<filter class="ch.qos.logback.core.filter.EvaluatorFilter">
            <evaluator>
                <expression>
                    ("org.hibernate.engine.jdbc.spi.SqlExceptionHelper".equals(logger)
                    &amp;&amp; (message.equals("SQL Warning Code: -1100, SQLState: 02000") || message.equals("no data")))
                </expression>
            </evaluator>
            <onMatch>DENY</onMatch>
            <onMismatch>NEUTRAL</onMismatch>
        </filter>-->

        <!-- pessimistic locking failure messages (HSQLDB) -->
        <!--<filter class="ch.qos.logback.core.filter.EvaluatorFilter">
            <evaluator>
                <expression>
                    ("org.hibernate.engine.jdbc.spi.SqlExceptionHelper".equals(logger)
                    &amp;&amp; (message.equals("SQL Error: -4861, SQLState: 40001") || message.equals("transaction rollback: serialization failure")))
                </expression>
            </evaluator>
            <onMatch>DENY</onMatch>
            <onMismatch>NEUTRAL</onMismatch>
        </filter>-->

        <!-- batch insert failures due to concurrency -->
        <filter class="ch.qos.logback.core.filter.EvaluatorFilter">
            <evaluator>
                <expression>
                    ("org.hibernate.orm.jdbc.batch".equals(logger)
                    &amp;&amp; (message.equals("HHH100503: On release of batch it still contained JDBC statements")
                    || message.startsWith("HHH100501: Exception executing batch [org.hibernate.StaleStateException: ")))
                </expression>
            </evaluator>
            <onMatch>DENY</onMatch>
            <onMismatch>NEUTRAL</onMismatch>
        </filter>

        <!-- web browser stomp disconnection failures -->
        <!--<filter class="ch.qos.logback.core.filter.EvaluatorFilter">
            <evaluator>
                <expression>
                    ("org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler".equals(logger)
                    &amp;&amp; (message.startsWith("Failed to forward DISCONNECT ")))
                </expression>
            </evaluator>
            <onMatch>DENY</onMatch>
            <onMismatch>NEUTRAL</onMismatch>
        </filter>-->

        <encoder>
            <!--<pattern>%d{HH:mm:ss.SSS} [%thread] %level %logger: %msg%n</pattern>-->
            <!--<pattern>%color(%d{HH:mm:ss.SSS}){bright_black} %color(%-5p){bright_black} %color([%15.15t]){bright_black} %color(%40.40logger{39}){cyan}: %color(%m%n%ewtpc)</pattern>-->
            <pattern>%color(%level){bright_black} %color([%thread]){bright_black} %color(%mdc){bright_black} %color(%logger){cyan}: %color(%newlines(%message)){}%n%color(%rootException)
            </pattern>
            <charset>UTF-8</charset>
        </encoder>

    </appender>

    <root level="trace">
        <appender-ref ref="STDOUT"/>
    </root>

</configuration>
