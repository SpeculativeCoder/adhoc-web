<?xml version="1.0" encoding="UTF-8"?>
<!--
    Copyright 2022-2023 SpeculativeCoder (https://github.com/SpeculativeCoder)

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.


    This file contains SQL from Quartz Scheduler (https://www.quartz-scheduler.org) - subject to Apache License, Version 2.0 (see adjacent *-LICENSE file)
    https://github.com/quartz-scheduler/quartz/blob/master/docs/license.adoc
    https://www.quartz-scheduler.org/overview/license.html

    Quartz License and Copyright

    Quartz Scheduler source code and documentation are Copyright (c) Terracotta, Inc.

    Quartz Scheduler is licensed under the Apache License, Version 2.0 (the "License"); you may not use Quartz binaries or source in whole or in part except in compliance with the License. You may obtain a copy of the License at:

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
-->

<databaseChangeLog
        xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog https://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.9.xsd">

    <changeSet author="adhoc" id="2">
        <!--
        from Quartz Scheduler tables_hsqldb.sql - subject to Apache License, Version 2.0 (see adjacent *-LICENSE file)
        https://github.com/quartz-scheduler/quartz/blob/master/quartz-core/src/main/resources/org/quartz/impl/jdbcjobstore/tables_hsqldb.sql
        https://github.com/quartz-scheduler/quartz/blob/master/docs/license.adoc
        https://www.quartz-scheduler.org/overview/license.html
        -->
        <sql dbms="hsqldb">
            DROP TABLE qrtz_locks IF EXISTS;
            DROP TABLE qrtz_scheduler_state IF EXISTS;
            DROP TABLE qrtz_fired_triggers IF EXISTS;
            DROP TABLE qrtz_paused_trigger_grps IF EXISTS;
            DROP TABLE qrtz_calendars IF EXISTS;
            DROP TABLE qrtz_blob_triggers IF EXISTS;
            DROP TABLE qrtz_cron_triggers IF EXISTS;
            DROP TABLE qrtz_simple_triggers IF EXISTS;
            DROP TABLE qrtz_simprop_triggers IF EXISTS;
            DROP TABLE qrtz_triggers IF EXISTS;
            DROP TABLE qrtz_job_details IF EXISTS;

            CREATE TABLE qrtz_job_details
            (
                SCHED_NAME        VARCHAR(120) NOT NULL,
                JOB_NAME          VARCHAR(200) NOT NULL,
                JOB_GROUP         VARCHAR(200) NOT NULL,
                DESCRIPTION       VARCHAR(250) NULL,
                JOB_CLASS_NAME    VARCHAR(250) NOT NULL,
                IS_DURABLE        BOOLEAN      NOT NULL,
                IS_NONCONCURRENT  BOOLEAN      NOT NULL,
                IS_UPDATE_DATA    BOOLEAN      NOT NULL,
                REQUESTS_RECOVERY BOOLEAN      NOT NULL,
                JOB_DATA          BLOB NULL,
                PRIMARY KEY (SCHED_NAME, JOB_NAME, JOB_GROUP)
            );

            CREATE TABLE qrtz_triggers
            (
                SCHED_NAME     VARCHAR(120) NOT NULL,
                TRIGGER_NAME   VARCHAR(200) NOT NULL,
                TRIGGER_GROUP  VARCHAR(200) NOT NULL,
                JOB_NAME       VARCHAR(200) NOT NULL,
                JOB_GROUP      VARCHAR(200) NOT NULL,
                DESCRIPTION    VARCHAR(250) NULL,
                NEXT_FIRE_TIME NUMERIC(13) NULL,
                PREV_FIRE_TIME NUMERIC(13) NULL,
                PRIORITY       INTEGER NULL,
                TRIGGER_STATE  VARCHAR(16)  NOT NULL,
                TRIGGER_TYPE   VARCHAR(8)   NOT NULL,
                START_TIME     NUMERIC(13)  NOT NULL,
                END_TIME       NUMERIC(13) NULL,
                CALENDAR_NAME  VARCHAR(200) NULL,
                MISFIRE_INSTR  NUMERIC(2) NULL,
                JOB_DATA       BLOB NULL,
                PRIMARY KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP),
                FOREIGN KEY (SCHED_NAME, JOB_NAME, JOB_GROUP)
                    REFERENCES QRTZ_JOB_DETAILS (SCHED_NAME, JOB_NAME, JOB_GROUP)
            );

            CREATE TABLE qrtz_simple_triggers
            (
                SCHED_NAME      VARCHAR(120) NOT NULL,
                TRIGGER_NAME    VARCHAR(200) NOT NULL,
                TRIGGER_GROUP   VARCHAR(200) NOT NULL,
                REPEAT_COUNT    NUMERIC(7)   NOT NULL,
                REPEAT_INTERVAL NUMERIC(12)  NOT NULL,
                TIMES_TRIGGERED NUMERIC(10)  NOT NULL,
                PRIMARY KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP),
                FOREIGN KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
                    REFERENCES QRTZ_TRIGGERS (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
            );

            CREATE TABLE qrtz_cron_triggers
            (
                SCHED_NAME      VARCHAR(120) NOT NULL,
                TRIGGER_NAME    VARCHAR(200) NOT NULL,
                TRIGGER_GROUP   VARCHAR(200) NOT NULL,
                CRON_EXPRESSION VARCHAR(120) NOT NULL,
                TIME_ZONE_ID    VARCHAR(80),
                PRIMARY KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP),
                FOREIGN KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
                    REFERENCES QRTZ_TRIGGERS (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
            );

            CREATE TABLE qrtz_simprop_triggers
            (
                SCHED_NAME    VARCHAR(120) NOT NULL,
                TRIGGER_NAME  VARCHAR(200) NOT NULL,
                TRIGGER_GROUP VARCHAR(200) NOT NULL,
                STR_PROP_1    VARCHAR(512) NULL,
                STR_PROP_2    VARCHAR(512) NULL,
                STR_PROP_3    VARCHAR(512) NULL,
                INT_PROP_1    NUMERIC(9) NULL,
                INT_PROP_2    NUMERIC(9) NULL,
                LONG_PROP_1   NUMERIC(13) NULL,
                LONG_PROP_2   NUMERIC(13) NULL,
                DEC_PROP_1    NUMERIC(13, 4) NULL,
                DEC_PROP_2    NUMERIC(13, 4) NULL,
                BOOL_PROP_1   BOOLEAN NULL,
                BOOL_PROP_2   BOOLEAN NULL,
                PRIMARY KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP),
                FOREIGN KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
                    REFERENCES QRTZ_TRIGGERS (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
            );

            CREATE TABLE qrtz_blob_triggers
            (
                SCHED_NAME    VARCHAR(120) NOT NULL,
                TRIGGER_NAME  VARCHAR(200) NOT NULL,
                TRIGGER_GROUP VARCHAR(200) NOT NULL,
                BLOB_DATA     BLOB NULL,
                PRIMARY KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP),
                FOREIGN KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
                    REFERENCES QRTZ_TRIGGERS (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
            );

            CREATE TABLE qrtz_calendars
            (
                SCHED_NAME    VARCHAR(120) NOT NULL,
                CALENDAR_NAME VARCHAR(200) NOT NULL,
                CALENDAR      BLOB         NOT NULL,
                PRIMARY KEY (SCHED_NAME, CALENDAR_NAME)
            );

            CREATE TABLE qrtz_paused_trigger_grps
            (
                SCHED_NAME    VARCHAR(120) NOT NULL,
                TRIGGER_GROUP VARCHAR(200) NOT NULL,
                PRIMARY KEY (SCHED_NAME, TRIGGER_GROUP)
            );

            CREATE TABLE qrtz_fired_triggers
            (
                SCHED_NAME        VARCHAR(120) NOT NULL,
                ENTRY_ID          VARCHAR(95)  NOT NULL,
                TRIGGER_NAME      VARCHAR(200) NOT NULL,
                TRIGGER_GROUP     VARCHAR(200) NOT NULL,
                INSTANCE_NAME     VARCHAR(200) NOT NULL,
                FIRED_TIME        NUMERIC(13)  NOT NULL,
                SCHED_TIME        NUMERIC(13)  NOT NULL,
                PRIORITY          INTEGER      NOT NULL,
                STATE             VARCHAR(16)  NOT NULL,
                JOB_NAME          VARCHAR(200) NULL,
                JOB_GROUP         VARCHAR(200) NULL,
                IS_NONCONCURRENT  BOOLEAN NULL,
                REQUESTS_RECOVERY BOOLEAN NULL,
                PRIMARY KEY (SCHED_NAME, ENTRY_ID)
            );

            CREATE TABLE qrtz_scheduler_state
            (
                SCHED_NAME        VARCHAR(120) NOT NULL,
                INSTANCE_NAME     VARCHAR(200) NOT NULL,
                LAST_CHECKIN_TIME NUMERIC(13)  NOT NULL,
                CHECKIN_INTERVAL  NUMERIC(13)  NOT NULL,
                PRIMARY KEY (SCHED_NAME, INSTANCE_NAME)
            );

            CREATE TABLE qrtz_locks
            (
                SCHED_NAME VARCHAR(120) NOT NULL,
                LOCK_NAME  VARCHAR(40)  NOT NULL,
                PRIMARY KEY (SCHED_NAME, LOCK_NAME)
            );
        </sql>

        <!--
        from Quartz Scheduler tables_postgres.sql - subject to Apache License, Version 2.0 (see adjacent *-LICENSE file)
        https://github.com/quartz-scheduler/quartz/blob/master/quartz-core/src/main/resources/org/quartz/impl/jdbcjobstore/tables_postgres.sql
        https://github.com/quartz-scheduler/quartz/blob/master/docs/license.adoc
        https://www.quartz-scheduler.org/overview/license.html
        it was noted at top of tables_postgres.sql: "Thanks to Patrick Lightbody for submitting this..."
        -->
        <sql dbms="postgresql">
            DROP TABLE IF EXISTS QRTZ_FIRED_TRIGGERS;
            DROP TABLE IF EXISTS QRTZ_PAUSED_TRIGGER_GRPS;
            DROP TABLE IF EXISTS QRTZ_SCHEDULER_STATE;
            DROP TABLE IF EXISTS QRTZ_LOCKS;
            DROP TABLE IF EXISTS QRTZ_SIMPLE_TRIGGERS;
            DROP TABLE IF EXISTS QRTZ_CRON_TRIGGERS;
            DROP TABLE IF EXISTS QRTZ_SIMPROP_TRIGGERS;
            DROP TABLE IF EXISTS QRTZ_BLOB_TRIGGERS;
            DROP TABLE IF EXISTS QRTZ_TRIGGERS;
            DROP TABLE IF EXISTS QRTZ_JOB_DETAILS;
            DROP TABLE IF EXISTS QRTZ_CALENDARS;

            CREATE TABLE QRTZ_JOB_DETAILS
            (
                SCHED_NAME        VARCHAR(120) NOT NULL,
                JOB_NAME          VARCHAR(200) NOT NULL,
                JOB_GROUP         VARCHAR(200) NOT NULL,
                DESCRIPTION       VARCHAR(250) NULL,
                JOB_CLASS_NAME    VARCHAR(250) NOT NULL,
                IS_DURABLE        BOOL         NOT NULL,
                IS_NONCONCURRENT  BOOL         NOT NULL,
                IS_UPDATE_DATA    BOOL         NOT NULL,
                REQUESTS_RECOVERY BOOL         NOT NULL,
                JOB_DATA          BYTEA NULL,
                PRIMARY KEY (SCHED_NAME, JOB_NAME, JOB_GROUP)
            );

            CREATE TABLE QRTZ_TRIGGERS
            (
                SCHED_NAME     VARCHAR(120) NOT NULL,
                TRIGGER_NAME   VARCHAR(200) NOT NULL,
                TRIGGER_GROUP  VARCHAR(200) NOT NULL,
                JOB_NAME       VARCHAR(200) NOT NULL,
                JOB_GROUP      VARCHAR(200) NOT NULL,
                DESCRIPTION    VARCHAR(250) NULL,
                NEXT_FIRE_TIME BIGINT NULL,
                PREV_FIRE_TIME BIGINT NULL,
                PRIORITY       INTEGER NULL,
                TRIGGER_STATE  VARCHAR(16)  NOT NULL,
                TRIGGER_TYPE   VARCHAR(8)   NOT NULL,
                START_TIME     BIGINT       NOT NULL,
                END_TIME       BIGINT NULL,
                CALENDAR_NAME  VARCHAR(200) NULL,
                MISFIRE_INSTR  SMALLINT NULL,
                JOB_DATA       BYTEA NULL,
                PRIMARY KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP),
                FOREIGN KEY (SCHED_NAME, JOB_NAME, JOB_GROUP)
                    REFERENCES QRTZ_JOB_DETAILS (SCHED_NAME, JOB_NAME, JOB_GROUP)
            );

            CREATE TABLE QRTZ_SIMPLE_TRIGGERS
            (
                SCHED_NAME      VARCHAR(120) NOT NULL,
                TRIGGER_NAME    VARCHAR(200) NOT NULL,
                TRIGGER_GROUP   VARCHAR(200) NOT NULL,
                REPEAT_COUNT    BIGINT       NOT NULL,
                REPEAT_INTERVAL BIGINT       NOT NULL,
                TIMES_TRIGGERED BIGINT       NOT NULL,
                PRIMARY KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP),
                FOREIGN KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
                    REFERENCES QRTZ_TRIGGERS (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
            );

            CREATE TABLE QRTZ_CRON_TRIGGERS
            (
                SCHED_NAME      VARCHAR(120) NOT NULL,
                TRIGGER_NAME    VARCHAR(200) NOT NULL,
                TRIGGER_GROUP   VARCHAR(200) NOT NULL,
                CRON_EXPRESSION VARCHAR(120) NOT NULL,
                TIME_ZONE_ID    VARCHAR(80),
                PRIMARY KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP),
                FOREIGN KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
                    REFERENCES QRTZ_TRIGGERS (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
            );

            CREATE TABLE QRTZ_SIMPROP_TRIGGERS
            (
                SCHED_NAME    VARCHAR(120) NOT NULL,
                TRIGGER_NAME  VARCHAR(200) NOT NULL,
                TRIGGER_GROUP VARCHAR(200) NOT NULL,
                STR_PROP_1    VARCHAR(512) NULL,
                STR_PROP_2    VARCHAR(512) NULL,
                STR_PROP_3    VARCHAR(512) NULL,
                INT_PROP_1    INT NULL,
                INT_PROP_2    INT NULL,
                LONG_PROP_1   BIGINT NULL,
                LONG_PROP_2   BIGINT NULL,
                DEC_PROP_1    NUMERIC(13, 4) NULL,
                DEC_PROP_2    NUMERIC(13, 4) NULL,
                BOOL_PROP_1   BOOL NULL,
                BOOL_PROP_2   BOOL NULL,
                PRIMARY KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP),
                FOREIGN KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
                    REFERENCES QRTZ_TRIGGERS (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
            );

            CREATE TABLE QRTZ_BLOB_TRIGGERS
            (
                SCHED_NAME    VARCHAR(120) NOT NULL,
                TRIGGER_NAME  VARCHAR(200) NOT NULL,
                TRIGGER_GROUP VARCHAR(200) NOT NULL,
                BLOB_DATA     BYTEA NULL,
                PRIMARY KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP),
                FOREIGN KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
                    REFERENCES QRTZ_TRIGGERS (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
            );

            CREATE TABLE QRTZ_CALENDARS
            (
                SCHED_NAME    VARCHAR(120) NOT NULL,
                CALENDAR_NAME VARCHAR(200) NOT NULL,
                CALENDAR      BYTEA        NOT NULL,
                PRIMARY KEY (SCHED_NAME, CALENDAR_NAME)
            );


            CREATE TABLE QRTZ_PAUSED_TRIGGER_GRPS
            (
                SCHED_NAME    VARCHAR(120) NOT NULL,
                TRIGGER_GROUP VARCHAR(200) NOT NULL,
                PRIMARY KEY (SCHED_NAME, TRIGGER_GROUP)
            );

            CREATE TABLE QRTZ_FIRED_TRIGGERS
            (
                SCHED_NAME        VARCHAR(120) NOT NULL,
                ENTRY_ID          VARCHAR(95)  NOT NULL,
                TRIGGER_NAME      VARCHAR(200) NOT NULL,
                TRIGGER_GROUP     VARCHAR(200) NOT NULL,
                INSTANCE_NAME     VARCHAR(200) NOT NULL,
                FIRED_TIME        BIGINT       NOT NULL,
                SCHED_TIME        BIGINT       NOT NULL,
                PRIORITY          INTEGER      NOT NULL,
                STATE             VARCHAR(16)  NOT NULL,
                JOB_NAME          VARCHAR(200) NULL,
                JOB_GROUP         VARCHAR(200) NULL,
                IS_NONCONCURRENT  BOOL NULL,
                REQUESTS_RECOVERY BOOL NULL,
                PRIMARY KEY (SCHED_NAME, ENTRY_ID)
            );

            CREATE TABLE QRTZ_SCHEDULER_STATE
            (
                SCHED_NAME        VARCHAR(120) NOT NULL,
                INSTANCE_NAME     VARCHAR(200) NOT NULL,
                LAST_CHECKIN_TIME BIGINT       NOT NULL,
                CHECKIN_INTERVAL  BIGINT       NOT NULL,
                PRIMARY KEY (SCHED_NAME, INSTANCE_NAME)
            );

            CREATE TABLE QRTZ_LOCKS
            (
                SCHED_NAME VARCHAR(120) NOT NULL,
                LOCK_NAME  VARCHAR(40)  NOT NULL,
                PRIMARY KEY (SCHED_NAME, LOCK_NAME)
            );

            CREATE INDEX IDX_QRTZ_J_REQ_RECOVERY
                ON QRTZ_JOB_DETAILS (SCHED_NAME, REQUESTS_RECOVERY);
            CREATE INDEX IDX_QRTZ_J_GRP
                ON QRTZ_JOB_DETAILS (SCHED_NAME, JOB_GROUP);

            CREATE INDEX IDX_QRTZ_T_J
                ON QRTZ_TRIGGERS (SCHED_NAME, JOB_NAME, JOB_GROUP);
            CREATE INDEX IDX_QRTZ_T_JG
                ON QRTZ_TRIGGERS (SCHED_NAME, JOB_GROUP);
            CREATE INDEX IDX_QRTZ_T_C
                ON QRTZ_TRIGGERS (SCHED_NAME, CALENDAR_NAME);
            CREATE INDEX IDX_QRTZ_T_G
                ON QRTZ_TRIGGERS (SCHED_NAME, TRIGGER_GROUP);
            CREATE INDEX IDX_QRTZ_T_STATE
                ON QRTZ_TRIGGERS (SCHED_NAME, TRIGGER_STATE);
            CREATE INDEX IDX_QRTZ_T_N_STATE
                ON QRTZ_TRIGGERS (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP, TRIGGER_STATE);
            CREATE INDEX IDX_QRTZ_T_N_G_STATE
                ON QRTZ_TRIGGERS (SCHED_NAME, TRIGGER_GROUP, TRIGGER_STATE);
            CREATE INDEX IDX_QRTZ_T_NEXT_FIRE_TIME
                ON QRTZ_TRIGGERS (SCHED_NAME, NEXT_FIRE_TIME);
            CREATE INDEX IDX_QRTZ_T_NFT_ST
                ON QRTZ_TRIGGERS (SCHED_NAME, TRIGGER_STATE, NEXT_FIRE_TIME);
            CREATE INDEX IDX_QRTZ_T_NFT_MISFIRE
                ON QRTZ_TRIGGERS (SCHED_NAME, MISFIRE_INSTR, NEXT_FIRE_TIME);
            CREATE INDEX IDX_QRTZ_T_NFT_ST_MISFIRE
                ON QRTZ_TRIGGERS (SCHED_NAME, MISFIRE_INSTR, NEXT_FIRE_TIME, TRIGGER_STATE);
            CREATE INDEX IDX_QRTZ_T_NFT_ST_MISFIRE_GRP
                ON QRTZ_TRIGGERS (SCHED_NAME, MISFIRE_INSTR, NEXT_FIRE_TIME, TRIGGER_GROUP, TRIGGER_STATE);

            CREATE INDEX IDX_QRTZ_FT_TRIG_INST_NAME
                ON QRTZ_FIRED_TRIGGERS (SCHED_NAME, INSTANCE_NAME);
            CREATE INDEX IDX_QRTZ_FT_INST_JOB_REQ_RCVRY
                ON QRTZ_FIRED_TRIGGERS (SCHED_NAME, INSTANCE_NAME, REQUESTS_RECOVERY);
            CREATE INDEX IDX_QRTZ_FT_J_G
                ON QRTZ_FIRED_TRIGGERS (SCHED_NAME, JOB_NAME, JOB_GROUP);
            CREATE INDEX IDX_QRTZ_FT_JG
                ON QRTZ_FIRED_TRIGGERS (SCHED_NAME, JOB_GROUP);
            CREATE INDEX IDX_QRTZ_FT_T_G
                ON QRTZ_FIRED_TRIGGERS (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP);
            CREATE INDEX IDX_QRTZ_FT_TG
                ON QRTZ_FIRED_TRIGGERS (SCHED_NAME, TRIGGER_GROUP);


            COMMIT;
        </sql>

    </changeSet>

</databaseChangeLog>
